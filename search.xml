<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[linux的fork(),waitpid()及wait()的用法]]></title>
      <url>https://b0lv42.github.io/2017/04/02/linux%E7%9A%84fork(),waitpid()%E5%8F%8Await()%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="这个是作业！更新写在前面！"><a href="#这个是作业！更新写在前面！" class="headerlink" title="这个是作业！更新写在前面！"></a>这个是作业！更新写在前面！</h1><h1 id="waitpid-及wait-原文地址"><a href="#waitpid-及wait-原文地址" class="headerlink" title="waitpid()及wait() 原文地址"></a><a href="http://www.2cto.com/os/201203/124851.html" target="_blank" rel="external">waitpid()及wait() 原文地址</a></h1><h1 id="fork-原文地址"><a href="#fork-原文地址" class="headerlink" title="fork() 原文地址"></a><a href="http://m.blog.csdn.net/article/details?id=5640969" target="_blank" rel="external">fork() 原文地址</a></h1><p>试了下一个小程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;<span class="comment">/* 如果是子进程 */</span><span class="comment">/* 在这里等待 */</span> <span class="comment">/* 如果是父进程 */</span>   </div><div class="line">        pc=fork();</div><div class="line">        <span class="keyword">if</span>(pc==<span class="number">0</span>)     </div><div class="line">        &#123;       </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"This is child process with pid of %d\n"</span>,getpid()); </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;    </div><div class="line">             pr=wait(<span class="literal">NULL</span>); </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"I catched a child process with pid of %d\n"</span>),pr); </div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(“hello1\n”);</div><div class="line">        </div><div class="line">        pc=fork();</div><div class="line">        <span class="keyword">if</span>(pc==<span class="number">0</span>)     </div><div class="line">        &#123;       </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"This is child process with pid of %d\n"</span>,getpid()); </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;    </div><div class="line">             pr=wait(<span class="literal">NULL</span>); </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"I catched a child process with pid of %d\n"</span>),pr); </div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(“hello2\n”);</div><div class="line">        </div><div class="line">        pc=fork();</div><div class="line">        <span class="keyword">if</span>(pc==<span class="number">0</span>)     </div><div class="line">        &#123;       </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"This is child process with pid of %d\n"</span>,getpid()); </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;    </div><div class="line">             pr=wait(<span class="literal">NULL</span>); </div><div class="line">             <span class="built_in">printf</span>(<span class="string">"I catched a child process with pid of %d\n"</span>),pr); </div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(“hello3\n”);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是第一个fork()调用完毕后的输出：<br><img src="http://img.blog.csdn.net/20170323221008483?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQm9sdmFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="a 这个是第小段运行完毕时的"></p>
<p>这是第二个fork()调用完毕后的输出：<br><img src="http://img.blog.csdn.net/20170323221311375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQm9sdmFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>这是第三个fork()调用完毕后的输出：<br><img src="http://img.blog.csdn.net/20170323221348470?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQm9sdmFy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="wait-等待子进程中断或结束"><a href="#wait-等待子进程中断或结束" class="headerlink" title="wait() (等待子进程中断或结束)"></a>wait() (等待子进程中断或结束)</h2><h4 id="表头文件："><a href="#表头文件：" class="headerlink" title="表头文件："></a>表头文件：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="定义函数："><a href="#定义函数：" class="headerlink" title="定义函数："></a>定义函数：</h4><p> <code>pid_t wait (int * status);</code></p>
<h4 id="函数说明："><a href="#函数说明：" class="headerlink" title="函数说明："></a>函数说明：</h4><p>wait()会暂时停止目前进程的执行,直到有信号来到或子进程结束。<br>如果在调用 wait()时子进程已经结束,则 wait()会立即返回<code>子进程结束状态值</code>。<br>子进程的结束状态值会由参数 status 返回,而子进程的进程识别码也会一起返回。</p>
<p>如果不在意结束状态值,则参数<code>status</code> 可以设成 <code>NULL</code>。<br>子进程的结束状态值请参考 <code>waitpid( )</code><br>如果执行成功则返回子进程识别码(PID) ,如果有错误发生则返回返回值-1。失败原因存于 errno 中。</p>
<blockquote>
<p>pid_t  pid1;<br>int status=0;<br>i=wait(&amp;status);</p>
</blockquote>
<p>i返回的是子进程的识别码 <code>PID</code><br>status中存的是子进程的结束状态；可用WEXITSTATUS（status）得到子进程的exit(3)的状态，那么就是3；</p>
<p> <br><br> <br></p>
<h2 id="waitpid-等待子进程中断或结束"><a href="#waitpid-等待子进程中断或结束" class="headerlink" title="waitpid() (等待子进程中断或结束)"></a>waitpid() (等待子进程中断或结束)</h2><h4 id="表头文件：-1"><a href="#表头文件：-1" class="headerlink" title="表头文件："></a>表头文件：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="定义函数：-1"><a href="#定义函数：-1" class="headerlink" title="定义函数："></a>定义函数：</h4><p> <code>pid_t waitpid(pid_t pid,int * status,int options);</code></p>
<h4 id="函数说明：-1"><a href="#函数说明：-1" class="headerlink" title="函数说明："></a>函数说明：</h4><p>waitpid()会暂时停止目前进程的执行,直到有信号来到或子进程结束。</p>
<p>如果在调用 wait()时子进程已经结束,则 wait()会立即返回<code>子进程结束状态值</code>。<br>子进程的结束状态值会由参数 status 返回,而子进程的进程识别码也会一快返回。<br>如果不在意结束状态值,则参数 status 可以设成 NULL。</p>
<p>参数 <code>pid</code> 为欲等待的子进程识别码,其他数值意义如下:</p>
<ul>
<li>pid&lt;-1 等待进程组识别码为 pid 绝对值的任何子进程。</li>
<li>pid=-1 等待任何子进程,相当于 wait()。            </li>
<li>pid=0  等待进程组识别码与目前进程相同的任何子进程。       </li>
<li>pid&gt;0  等待任何子进程识别码为 pid 的子进程。</li>
</ul>
<p>参数 <code>option</code> 可以为 0 或下面的 OR 组合:</p>
<ul>
<li><code>WNOHANG</code> 如果没有任何已经结束的子进程则马上返回, 不予以等待。</li>
<li><code>WUNTRACED</code> 如果子进程进入暂停执行情况则马上返回,但结束状态不予以理会。</li>
</ul>
<p>子进程的结束状态返回后存于 status,底下有几个宏可判别结束情况:</p>
<ul>
<li><code>WIFEXITED(status)</code>   如果子进程正常结束则为非 0 值。</li>
<li><code>WEXITSTATUS(status)</code> 取得子进程 exit()返回的结束代码,一般会先用 WIFEXITED 来判断是否正常结束才能使用此宏。</li>
<li><code>WIFSIGNALED(status)</code> 如果子进程是因为信号而结束则此宏值为真</li>
<li><code>WTERMSIG(status</code>)    取得子进程因信号而中止的信号代码,一般会先用 WIFSIGNALED 来判断后才使用此宏。</li>
<li><code>WIFSTOPPED(status)</code>  如果子进程处于暂停执行情况则此宏值为真。一般只有使用 WUNTRACED 时才会有此情况。</li>
<li><code>WSTOPSIG(status)</code>    取得引发子进程暂停的信号代码,一般会先用 WIFSTOPPED 来判断后才使用此宏。</li>
<li>如果执行成功则返回子进程识别码(PID) ,如果有错误发生则返回返回值-1。失败原因存于 errno 中。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">pid_t</span> childpid;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    </div><div class="line">    childpid = fork();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == childpid )</div><div class="line">    &#123;</div><div class="line">        perror( <span class="string">"fork()"</span> );</div><div class="line">        <span class="built_in">exit</span>( EXIT_FAILURE );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="number">0</span> == childpid )</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">puts</span>( <span class="string">"In child process"</span> );</div><div class="line">        sleep( <span class="number">3</span> );<span class="comment">//让子进程睡眠3秒，看看父进程的行为</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\tchild pid = %d\n"</span>, getpid());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\tchild ppid = %d\n"</span>, getppid());</div><div class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123;</div><div class="line">        waitpid( childpid, &amp;status, <span class="number">0</span> );</div><div class="line">        <span class="built_in">puts</span>( <span class="string">"in parent"</span> );</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"\tparent pid = %d\n"</span>, getpid() );</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"\tparent ppid = %d\n"</span>, getppid()  );</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"\tchild process exited with status %d \n"</span>, status );</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]<span class="meta"># gcc waitpid.c </span></div><div class="line">[root@localhost src]# ./a.out </div><div class="line">In child process</div><div class="line">        child pid = <span class="number">4469</span></div><div class="line">        child ppid = <span class="number">4468</span></div><div class="line">in parent</div><div class="line">        parent pid = <span class="number">4468</span></div><div class="line">        parent ppid = <span class="number">4379</span></div><div class="line">        child process exited with status <span class="number">0</span> </div><div class="line">[root@localhost src]#</div></pre></td></tr></table></figure>
<p>如果将上面<code>waitpid( childpid, &amp;status, 0 );</code>行注释掉，程序执行效果如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]# ./a.out </div><div class="line">In child process</div><div class="line">in parent</div><div class="line">        parent pid = <span class="number">4481</span></div><div class="line">        parent ppid = <span class="number">4379</span></div><div class="line">        child process exited with status <span class="number">1331234400</span> </div><div class="line">[root@localhost src]#   child pid = <span class="number">4482</span></div><div class="line">        child ppid = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>子进程还没有退出，父进程已经退出了。</p>
<h2 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h2><h3 id="fork入门知识"><a href="#fork入门知识" class="headerlink" title="fork入门知识"></a>fork入门知识</h3><p>一个进程包括它的<code>代码</code>、<code>数据</code>和<code>分配给进程的资源</code>。<br>fork()函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事<br>但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。<br>一个进程调用fork()函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。<br>然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">	<span class="keyword">pid_t</span> fpid; <span class="comment">//fpid表示fork函数返回的值</span></div><div class="line">	<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">	fpid=fork(); </div><div class="line">	<span class="keyword">if</span> (fpid &lt; <span class="number">0</span>) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error in fork!"</span>); </div><div class="line">	<span class="keyword">else</span> </div><div class="line">    <span class="keyword">if</span> (fpid == <span class="number">0</span>) </div><div class="line">    &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"i am the child process, my process id is %d/n"</span>,getpid()); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"我是爹的儿子/n"</span>);<span class="comment">//对某些人来说中文看着更直白。</span></div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">    &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"i am the parent process, my process id is %d/n"</span>,getpid()); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"我是孩子他爹/n"</span>);</div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"统计结果是: %d/n"</span>,count);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：</p>
<blockquote>
<p>i am the child process, my process id is 5574<br>我是爹的儿子<br>统计结果是: 1<br>i am the parent process, my process id is 5573<br>我是孩子他爹<br>统计结果是: 1</p>
</blockquote>
<p>在语句<code>fpid=fork()</code>之前，只有一个进程在执行这段代码，但在这条语句之后，就变成两个进程在执行了<br>这两个进程的几乎完全相同，将要执行的下一条语句都是<code>if(fpid&lt;0)</code><br>两个进程的fpid不同与fork函数的特性有关。<br>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：<br>1.在父进程中，fork返回新创建子进程的进程ID；<br>2.在子进程中，fork返回<code>0</code>；<br>3.如果出现错误，fork返回一个负值；</p>
<p>在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。<br>在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的<code>进程ID</code>。<br>我们可以通过fork返回的值来判断当前进程是子进程还是父进程。</p>
<p>引用一位网友的话来解释fpid的值为什么在父子进程中不同：</p>
<blockquote>
<p>其实就相当于链表，进程形成了链表，父进程的fpid(p意味point)指向子进程的进程id, 因为子进程没有子进程，所以其fpid为0.</p>
</blockquote>
<p>fork出错可能有两种原因：<br>1.当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。<br>2.系统内存不足，这时errno的值被设置为ENOMEM。</p>
<p>创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。<br>每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。<br>fork执行完毕后，出现两个进程:<br><img src="/img/0_1275576795zgzN.gif.png" alt="进程图"></p>
<p>有人说两个进程的内容完全一样啊，怎么打印的结果不一样啊，那是因为判断条件的原因，上面列举的只是进程的代码和指令，还有变量啊。<br>执行完fork后，进程1的变量为count=0，fpid！=0（父进程）。进程2的变量为count=0，fpid=0（子进程），这两个进程的变量都是独立的，<code>存在不同的地址中，不是共用的</code>，这点要注意。可以说，我们就是通过fpid来识别和操作父子进程的。<br>还有人可能疑惑为什么不是从#include处开始复制代码的，这是因为fork是把进程当前的情况拷贝一份，执行fork时，进程已经执行完了int count=0;fork只拷贝下一个要执行的代码到新的进程。</p>
<h3 id="fork进阶知识"><a href="#fork进阶知识" class="headerlink" title="fork进阶知识"></a>fork进阶知识</h3><h4 id="代码1："><a href="#代码1：" class="headerlink" title="代码1："></a>代码1：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"i son/pa ppid pid  fpid/n"</span>);</div><div class="line"></div><div class="line">   <span class="comment">//ppid指当前进程的父进程pid</span></div><div class="line">   <span class="comment">//pid指当前进程的pid,</span></div><div class="line">   <span class="comment">//fpid指fork返回给当前进程的值</span></div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</div><div class="line">   &#123;</div><div class="line">       <span class="keyword">pid_t</span> fpid=fork();</div><div class="line">       <span class="keyword">if</span> (fpid==<span class="number">0</span>)</div><div class="line">    	   <span class="built_in">printf</span>(<span class="string">"%d child  %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d parent %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">    运行结果是：</div><div class="line">&gt;    i son/pa ppid pid  fpid</div><div class="line">&gt;    <span class="number">0</span> parent <span class="number">2043</span> <span class="number">3224</span> <span class="number">3225</span></div><div class="line">&gt;    <span class="number">0</span> child  <span class="number">3224</span> <span class="number">3225</span>    <span class="number">0</span></div><div class="line">&gt;    <span class="number">1</span> parent <span class="number">2043</span> <span class="number">3224</span> <span class="number">3226</span></div><div class="line">&gt;    <span class="number">1</span> parent <span class="number">3224</span> <span class="number">3225</span> <span class="number">3227</span></div><div class="line">&gt;    <span class="number">1</span> child     <span class="number">1</span> <span class="number">3227</span>    <span class="number">0</span></div><div class="line">&gt;    <span class="number">1</span> child     <span class="number">1</span> <span class="number">3226</span>    <span class="number">0</span></div><div class="line"></div><div class="line">##### 第一步：</div><div class="line">在父进程中，指令执行到<span class="keyword">for</span>循环中，i=<span class="number">0</span>，接着执行fork，fork执行完后，系统中出现两个进程，分别是p3224和p3225（后面我都用pxxxx表示进程id为xxxx的进程）。</div><div class="line">可以看到父进程p3224的父进程是p2043，子进程p3225的父进程正好是p3224。我们用一个链表来表示这个关系：</div><div class="line">`p2043-&gt;p3224-&gt;p3225`</div><div class="line">第一次fork后，p3224（父进程）的变量为i=<span class="number">0</span>，fpid=<span class="number">3225</span>（fork函数在父进程中返向子进程id），代码内容为：</div><div class="line"></div><div class="line">``` C++</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</div><div class="line">   &#123;</div><div class="line">       <span class="keyword">pid_t</span> fpid=fork();<span class="comment">//执行完毕，i=0，fpid=3225</span></div><div class="line">       <span class="keyword">if</span> (fpid==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d child  %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d parent %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>
<pre><code>p3225（子进程）的变量为i=0，fpid=0（fork函数在子进程中返回0）
代码内容为： 
</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</div><div class="line"> &#123;</div><div class="line">    <span class="keyword">pid_t</span> fpid=fork();                         <span class="comment">//执行完毕，i=0，fpid=0</span></div><div class="line">    <span class="keyword">if</span> (fpid==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d child  %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d parent %4d %4d %4d/n"</span>,i,getppid(),getpid(),fpid);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>所以打印出结果：</p>
<blockquote>
<p>  0 parent 2043 3224 3225<br>  0 child  3224 3225    0</p>
</blockquote>
<h5 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h5><p>假设父进程p3224先执行，当进入下一个循环时，i=1，接着执行fork，系统中又新增一个进程p3226，对于此时的父进程，p2043-&gt;p3224（当前进程）-&gt;p3226（被创建的子进程）。<br>对于子进程p3225，执行完第一次循环后，i=1，接着执行fork，系统中新增一个进程p3227，对于此进程，p3224-&gt;p3225（当前进程）-&gt;p3227（被创建的子进程）。从输出可以看到p3225原来是p3224的子进程，现在变成p3227的父进程。父子是相对的，这个大家应该容易理解。只要当前进程执行了fork，该进程就变成了父进程了，就打印出了parent。<br>所以打印出结果是：</p>
<blockquote>
<p> 1 parent 2043 3224 3226<br> 1 parent 3224 3225 3227</p>
</blockquote>
<h5 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h5><p>第二步创建了两个进程p3226，p3227，这两个进程执行完printf函数后就结束了，因为这两个进程无法进入第三次循环，无法fork，该执行return 0;了，其他进程也是如此。<br>以下是p3226，p3227打印出的结果：</p>
<blockquote>
<p>1 child     1 3227    0<br>1 child     1 3226    0<br>细心的读者可能注意到p3226，p3227的父进程难道不该是p3224和p3225吗，怎么会是1呢？<br>这里得讲到进程的创建和死亡的过程，在p3224和p3225执行完第二个循环后，main函数就该退出了，也即进程该死亡了，因为它已经做完所有事情了。<br>p3224和p3225死亡后，p3226，p3227就没有父进程了，这在操作系统是不被允许的，所以p3226，p3227的父进程就被置为p1了，p1是永远不会死亡的。</p>
</blockquote>
<p>总结一下，这个程序执行的流程如下：<br><img src="/img/0_1275402306yq99.gif.jpg" alt="流程图"><br>这个程序最终产生了3个子进程，执行过6次printf()函数。</p>
<h4 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</div><div class="line">   &#123;</div><div class="line">       <span class="keyword">pid_t</span> fpid=fork();</div><div class="line">       <span class="keyword">if</span> (fpid==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"son/n"</span>);</div><div class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"father/n"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的执行结果是：</p>
<blockquote>
<p>  father<br>  son<br>  father<br>  father<br>  father<br>  father<br>  son<br>  son<br>  father<br>  son<br>  son<br>  son<br>  father<br>  son</p>
</blockquote>
<pre><code>分析：
for        i=0         1           2
          father     father     father
                                    son
                        son       father
                                    son
           son       father     father
                                    son
                        son       father
                                    son
</code></pre><p>其中每一行分别代表一个进程的运行打印结果。<br>总结一下规律，<code>对于这种N次循环的情况，执行printf函数的次数为2*（1+2+4+……+2N-1）次，创建的子进程数为1+2+4+……+2N-1个。</code></p>
<p><a href="http://202.117.3.13/wordpress/?p=81" target="_blank" rel="external">数学推理</a>（该博文的最后）。<br>如果想测一下一个程序中到底创建了几个子进程，<br><code>最好的方法就是调用printf函数打印该进程的pid，也即调用printf(&quot;%d/n&quot;,getpid());或者通过printf(&quot;+/n&quot;);来判断产生了几个进程。</code><br>有人想通过调用printf(“+”)来统计创建了几个进程，这是不妥当的。<br>大家看一下下面的代码：</p>
<h4 id="代码3："><a href="#代码3：" class="headerlink" title="代码3："></a>代码3：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">pid_t</span> fpid;     <span class="comment">//fpid表示fork函数返回的值</span></div><div class="line">	<span class="comment">//printf("fork!");</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"fork!/n"</span>);</div><div class="line">	fpid = fork();</div><div class="line">	<span class="keyword">if</span> (fpid &lt; <span class="number">0</span>)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error in fork!"</span>);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (fpid == <span class="number">0</span>)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"I am the child process, my process id is %d/n"</span>, getpid());</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"I am the parent process, my process id is %d/n"</span>, getpid());</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<blockquote>
<p>  fork!<br>  I am the parent process, my process id is 3361<br>  I am the child process, my process id is 3362</p>
</blockquote>
<p><code>如果把语句printf(&quot;fork!/n&quot;);注释掉，执行printf(&quot;fork!&quot;);</code><br>则新的程序的执行结果是：</p>
<blockquote>
<p>  fork!I am the parent process, my process id is 3298<br>  fork!I am the child process, my process id is 3299</p>
</blockquote>
<p>程序的唯一的区别就在于一个/n回车符号，为什么结果会相差这么大呢？<br>这就跟printf的缓冲机制有关了，printf某些内容时，操作系统仅仅是把该内容放到了stdout的缓冲队列里了,<code>并没有实际的写到屏幕</code>上。但是,只要看到有/n 则会立即刷新stdout,因此就马上能够打印了。<br>运行了printf(“fork!”)后,“fork!”仅仅被放到了缓冲里,程序运行到fork时缓冲里面的“fork!” 被子进程复制过去了。<br>因此在子进程度stdout缓冲里面就也有了fork!。所以,你最终看到的会是”fork!”被printf了2次！<br>而运行printf(“fork! /n”)后,“fork!”被立即打印到了屏幕上,之后fork到的子进程里的stdout缓冲里不会有fork! 内容。因此你看到的结果会是fork! 被printf了1次！<br>所以说printf(“+”)不能正确地反应进程的数量。</p>
<h4 id="代码4："><a href="#代码4：" class="headerlink" title="代码4："></a>代码4：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">   fork();</div><div class="line">   fork() &amp;&amp; fork() || fork();</div><div class="line">   fork();</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题是不算main这个进程自身，程序到底创建了多少个进程。<br>为了解答这个问题，我们先做一下弊，先用程序验证一下，到此有多少个进程。 </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">   fork();</div><div class="line">   fork() &amp;&amp; fork() || fork();</div><div class="line">   fork();</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"+/n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总共20个进程，除去main进程，还有19个进程。<br>第一个fork和最后一个fork肯定是会执行的。<br>主要在中间3个fork上，可以画一个图进行描述。<br>这里就需要注意&amp;&amp;和||运算符。</p>
<ul>
<li>A&amp;&amp;B，如果A==0，就没有必要继续执行&amp;&amp;B了；A非0，就需要继续执行&amp;&amp;B。</li>
<li>A||B，如果A非0，就没有必要继续执行||B了，A=0，就需要继续执行||B。<br>fork()对于父进程和子进程的返回值是不同的，按照上面的A&amp;&amp;B和A||B的分支进行画图，可以得出5个分支。</li>
</ul>
<p><img src="/img/0_1275406158t1t0.gif.png" alt="分支图"></p>
<p>加上前面的fork和最后的fork，总共4*5=20个进程，除去main主进程，就是19个进程了。</p>
<h3 id="fork高阶知识"><a href="#fork高阶知识" class="headerlink" title="fork高阶知识"></a>fork高阶知识</h3><pre><code>就fork函数讲一下操作系统进程的创建、死亡和调度等。
</code></pre><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://blog.csdn.net/dog_in_yellow/archive/2008/01/13/2041079.aspx" target="_blank" rel="external">http://blog.csdn.net/dog_in_yellow/archive/2008/01/13/2041079.aspx</a></p>
<p><a href="http://blog.chinaunix.net/u1/53053/showart_425189.html" target="_blank" rel="external">http://blog.chinaunix.net/u1/53053/showart_425189.html</a></p>
<p><a href="http://blog.csdn.net/saturnbj/archive/2009/06/19/4282639.aspx" target="_blank" rel="external">http://blog.csdn.net/saturnbj/archive/2009/06/19/4282639.aspx</a></p>
<p><a href="http://www.cppblog.com/zhangxu/archive/2007/12/02/37640.html" target="_blank" rel="external">http://www.cppblog.com/zhangxu/archive/2007/12/02/37640.html</a></p>
<p><a href="http://www.qqread.com/linux/2010/03/y491043.html" target="_blank" rel="external">http://www.qqread.com/linux/2010/03/y491043.html</a></p>
<p><a href="http://www.yuanma.org/data/2009/1103/article_3998.html" target="_blank" rel="external">http://www.yuanma.org/data/2009/1103/article_3998.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 零零碎碎的知识！ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[喵喵喵！]]></title>
      <url>https://b0lv42.github.io/2017/04/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 收集的乱七八糟的东西！ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 2500 【简单题】做一个正气的杭电人]]></title>
      <url>https://b0lv42.github.io/2017/03/11/HDOJ%202500%20%E3%80%90%E7%AE%80%E5%8D%95%E9%A2%98%E3%80%91%E5%81%9A%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%B0%94%E7%9A%84%E6%9D%AD%E7%94%B5%E4%BA%BA/</url>
      <content type="html"><![CDATA[<p>###【题目描述】<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2500" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2500</a></p>
<p>###【思路】<br>超简单 就不写辣！</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> T,n;</div><div class="line"></div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (T--)</div><div class="line">      &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">printf</span>(<span class="string">"HDU"</span>);</div><div class="line">                  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 3790 【Dijkstra】最短路径问题]]></title>
      <url>https://b0lv42.github.io/2017/03/11/HDOJ%203790%20%E3%80%90Dijkstra%E3%80%91%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3790</a></p>
<h3 id="【思路】"><a href="#【思路】" class="headerlink" title="【思路】"></a>【思路】</h3><p>松弛操作每更新一条边，不管被更新的点的cost值是否最小都要被更新，这里wa了3发…..<br>当被更新的点的dis值相等时再检查cost的值是否最小。<br><br><br><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">2100000</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</div><div class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt; Q;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,S,T,tail,dis[<span class="number">1100</span>],head[<span class="number">1100</span>],cost[<span class="number">1100</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> c,w,to,next;</div><div class="line">&#125;k,edge[<span class="number">210000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d,<span class="keyword">int</span> p)</span></span></div><div class="line">&#123;</div><div class="line">      edge[tail].w=d;</div><div class="line">      edge[tail].to=v;</div><div class="line">      edge[tail].c=p;</div><div class="line">      edge[tail].next=head[u];</div><div class="line">      head[u]=tail++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      Pair s,u;</div><div class="line">      <span class="keyword">int</span> v,val;</div><div class="line"></div><div class="line">      dis[S]=<span class="number">0</span>;</div><div class="line">      cost[S]=<span class="number">0</span>;</div><div class="line">      s.first=<span class="number">0</span>;</div><div class="line">      s.second=S;</div><div class="line">      Q.push(s);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (!Q.empty())</div><div class="line">      &#123;</div><div class="line">            u=Q.top();</div><div class="line">            Q.pop();</div><div class="line">            v=u.second;</div><div class="line">            val=u.first;</div><div class="line">            <span class="keyword">if</span> (dis[v]&lt;val) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=head[v];i!=<span class="number">-1</span>;i=edge[i].next)</div><div class="line">            &#123;</div><div class="line">                  k=edge[i];</div><div class="line">                  <span class="keyword">if</span> (dis[k.to]&gt;dis[v]+k.w)</div><div class="line">                  &#123;</div><div class="line">                        dis[k.to]=dis[v]+k.w;</div><div class="line">                        Q.push(Pair(dis[k.to],k.to));</div><div class="line">                        cost[k.to]=cost[v]+k.c;</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">else</span> <span class="keyword">if</span> (dis[k.to]==dis[v]+k.w)</div><div class="line">                        cost[k.to]=min(cost[k.to],cost[v]+k.c);</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,u,v,d,p;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">if</span> (!n &amp;&amp; !m) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            tail=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1100</span>;i++) head[i]=<span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1100</span>;i++) dis[i]=Max;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1100</span>;i++) cost[i]=Max;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;u,&amp;v,&amp;d,&amp;p);</div><div class="line">                  build(u,v,d,p);</div><div class="line">                  build(v,u,d,p);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);</div><div class="line"></div><div class="line">            Dij();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,dis[T],cost[T]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 2544 【Dijkstra】最短路]]></title>
      <url>https://b0lv42.github.io/2017/03/11/HDOJ%202544%20%E3%80%90Dijkstra%E3%80%91%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2544</a><br><br><br><br></p>
<h3 id="【思路】"><a href="#【思路】" class="headerlink" title="【思路】"></a>【思路】</h3><p>啊就是最短路裸题…Dijkstra+heap<br><br><br><br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">2100000</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</div><div class="line">priority_queue&lt;Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt; Q;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,tail,dis[<span class="number">200</span>],head[<span class="number">200</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> w,to,next;</div><div class="line">&#125;k,edge[<span class="number">21000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">      edge[tail].w=x;</div><div class="line">      edge[tail].to=v;</div><div class="line">      edge[tail].next=head[u];</div><div class="line">      head[u]=tail++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      Pair s,u;</div><div class="line">      <span class="keyword">int</span> v,val;</div><div class="line"></div><div class="line">      dis[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">      s.first=<span class="number">0</span>;</div><div class="line">      s.second=<span class="number">1</span>;</div><div class="line">      Q.push(s);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (!Q.empty())</div><div class="line">      &#123;</div><div class="line">            u=Q.top();</div><div class="line">            Q.pop();</div><div class="line">            v=u.second;</div><div class="line">            val=u.first;</div><div class="line">            <span class="keyword">if</span> (dis[v]&lt;val) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=head[v];i!=<span class="number">-1</span>;i=edge[i].next)</div><div class="line">            &#123;</div><div class="line">                  k=edge[i];</div><div class="line">                  <span class="keyword">if</span> (dis[k.to]&gt;dis[v]+k.w)</div><div class="line">                  &#123;</div><div class="line">                        dis[k.to]=dis[v]+k.w;</div><div class="line">                        Q.push(Pair(dis[k.to],k.to));</div><div class="line">                  &#125;</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,u,v,x;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">if</span> (!n &amp;&amp; !m) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            tail=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++) head[i]=<span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++) dis[i]=Max;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;x);</div><div class="line">                  build(u,v,x);</div><div class="line">                  build(v,u,x);</div><div class="line">            &#125;</div><div class="line">            Dij();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[n]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 2066 【Dijkstra】一个人的旅行]]></title>
      <url>https://b0lv42.github.io/2017/03/10/HDOJ%202066%20%E3%80%90Dijkstra%E3%80%91%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%85%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2066" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2066</a></p>
<h3 id="【思路】"><a href="#【思路】" class="headerlink" title="【思路】"></a>【思路】</h3><p>看起来是多源多终点的最短路问题，每个起点和每个终点都枚举的话，复杂度会很高，所以我自己建一个点，编号是0，在它与所有的起点之间建一条费用为0的双向边，再建一个点，编号是2000（远大于数据范围），在它和所有的终点之间建0费用边。<br>然后问题就很好解决了，单源最短路嘿！<em>(:з」∠)</em></p>
<h3 id="Dijkstra-heap-前向星："><a href="#Dijkstra-heap-前向星：" class="headerlink" title="Dijkstra+heap+前向星："></a>Dijkstra+heap+前向星：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">21000000</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</div><div class="line">priority_queue&lt; Pair, <span class="built_in">vector</span>&lt;Pair&gt;, greater&lt;Pair&gt; &gt; Q;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dis[<span class="number">2100</span>],head[<span class="number">2100</span>];</div><div class="line"><span class="keyword">int</span> tail;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> w,to,next;</div><div class="line">&#125;edge[<span class="number">201000</span>],k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">      edge[tail].w=x;</div><div class="line">      edge[tail].to=b;</div><div class="line">      edge[tail].next=head[a];</div><div class="line">      head[a]=tail++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      Pair s,u;</div><div class="line">      <span class="keyword">int</span> v,val;</div><div class="line"></div><div class="line">      dis[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">      s.first=<span class="number">0</span>;</div><div class="line">      s.second=<span class="number">0</span>;</div><div class="line">      Q.push(s);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (!Q.empty())</div><div class="line">      &#123;</div><div class="line">            u=Q.top();</div><div class="line">            Q.pop();</div><div class="line">            val=u.first;</div><div class="line">            v=u.second;</div><div class="line">            <span class="keyword">if</span> (dis[v]&lt;val) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=head[v]; i!=<span class="number">-1</span>; i=edge[i].next)</div><div class="line">            &#123;</div><div class="line">                  k=edge[i];</div><div class="line">                  <span class="keyword">if</span> (dis[k.to]&gt;dis[v]+k.w)</div><div class="line">                  &#123;</div><div class="line">                        dis[k.to]=dis[v]+k.w;</div><div class="line">                        Q.push(Pair(dis[k.to],k.to));</div><div class="line">                  &#125;</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> T,S,D,a,b,x;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;T,&amp;S,&amp;D)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2100</span>;i++) head[i]=<span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2100</span>;i++) dis[i]=Max;</div><div class="line">            tail=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;x);</div><div class="line">                  build(a,b,x);</div><div class="line">                  build(b,a,x);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=S;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">                  build(<span class="number">0</span>,x,<span class="number">0</span>);</div><div class="line">                  build(x,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=D;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">                  build(<span class="number">2000</span>,x,<span class="number">0</span>);</div><div class="line">                  build(x,<span class="number">2000</span>,<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            Dijkstra();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[<span class="number">2000</span>]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1874 【FLoyd】【Bellman】【Dijkstra】畅通工程续]]></title>
      <url>https://b0lv42.github.io/2017/03/09/HDOJ%201874%20%E3%80%90FLoyd%E3%80%91%E3%80%90Bellman%E3%80%91%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1874</a><br><br><br><br></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>单源单终点求最短路，有很多写法…数据小。<br>P.S.用floyd是有坑的，数据会给出一条起点和终点相同的正边，就会WA。<br><br><br><br></p>
<h2 id="FLoyd"><a href="#FLoyd" class="headerlink" title="FLoyd"></a>FLoyd</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">210000</span>;</div><div class="line"><span class="keyword">int</span> dis[<span class="number">300</span>][<span class="number">300</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,a,b,s,t,x;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+<span class="number">1</span>;j++)</div><div class="line">                  &#123;</div><div class="line">                        <span class="keyword">if</span> (i==j) dis[i][i]=<span class="number">0</span>;</div><div class="line">                        <span class="keyword">else</span> dis[i][j]=Max;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;x);</div><div class="line">                  a++;b++;</div><div class="line">                  <span class="keyword">if</span> (dis[a][b]&gt;x) dis[a][b]=dis[b][a]=x;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                        dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</div><div class="line"></div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s,&amp;t);</div><div class="line">            <span class="keyword">if</span> (dis[s+<span class="number">1</span>][t+<span class="number">1</span>]==Max) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[s+<span class="number">1</span>][t+<span class="number">1</span>]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<h2 id="Bellman-Ford："><a href="#Bellman-Ford：" class="headerlink" title="Bellman_Ford："></a>Bellman_Ford：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">2100000</span>;</div><div class="line"><span class="keyword">int</span> dis[<span class="number">300</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> from,to,value;</div><div class="line">&#125;edge[<span class="number">22000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) dis[i]=Max;</div><div class="line">      dis[s]=<span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">            &#123;</div><div class="line">                  dis[edge[j].to]=min( dis[edge[j].to], dis[edge[j].from] + edge[j].value);</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,s,t;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].from,&amp;edge[i].to,&amp;edge[i].value);</div><div class="line">                  edge[i+m].to=edge[i].from;</div><div class="line">                  edge[i+m].from=edge[i].to;</div><div class="line">                  edge[i+m].value=edge[i].value;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s,&amp;t);</div><div class="line">            Bellman_Ford(n,m&lt;&lt;<span class="number">1</span>,s,t);</div><div class="line">            <span class="keyword">if</span> (dis[t]==Max) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[t]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Dijkstra-没优化-邻接矩阵："><a href="#Dijkstra-没优化-邻接矩阵：" class="headerlink" title="Dijkstra 没优化+邻接矩阵："></a>Dijkstra 没优化+邻接矩阵：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">210000</span>;</div><div class="line"><span class="keyword">int</span> dis[<span class="number">300</span>],vis[<span class="number">300</span>],Map[<span class="number">300</span>][<span class="number">300</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) dis[i]=Max;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) vis[i]=<span class="number">0</span>;</div><div class="line">      dis[s]=<span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">int</span> v=<span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                  <span class="keyword">if</span> (!vis[i] &amp;&amp; (v==<span class="number">-1</span> || dis[i]&lt;dis[v])) v=i;</div><div class="line">            <span class="keyword">if</span> (v==<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                  dis[i]=min(dis[i],dis[v]+Map[v][i]);</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> a,b,x,n,m,s,t;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">300</span>;j++)</div><div class="line">                       <span class="keyword">if</span> (i==j) Map[i][j]=<span class="number">0</span>;</div><div class="line">                       <span class="keyword">else</span> Map[i][j]=Max;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;x);</div><div class="line">                  <span class="keyword">if</span> (Map[a+<span class="number">1</span>][b+<span class="number">1</span>]&gt;x) Map[a+<span class="number">1</span>][b+<span class="number">1</span>]=Map[b+<span class="number">1</span>][a+<span class="number">1</span>]=x;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s,&amp;t);</div><div class="line">            dijkstra(n,m,s+<span class="number">1</span>,t+<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (dis[t+<span class="number">1</span>]!=Max) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[t+<span class="number">1</span>]);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><br></p>
<h2 id="Dijkstra-heap："><a href="#Dijkstra-heap：" class="headerlink" title="Dijkstra+heap："></a>Dijkstra+heap：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">21000000</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pair;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dis[<span class="number">300</span>],head[<span class="number">300</span>];</div><div class="line"><span class="keyword">int</span> S,T,m,n,tail;</div><div class="line">priority_queue&lt; Pair,<span class="built_in">vector</span>&lt;Pair&gt;,greater&lt;Pair&gt; &gt; Q;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> w,to,next;</div><div class="line">&#125;edge[<span class="number">3000</span>],k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">      edge[tail].w=x;</div><div class="line">      edge[tail].to=b;</div><div class="line">      edge[tail].next=head[a];</div><div class="line">      head[a]=tail++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      Pair s;</div><div class="line">      <span class="keyword">int</span> v,val;</div><div class="line"></div><div class="line">      dis[S]=<span class="number">0</span>;</div><div class="line">      s.first=<span class="number">0</span>;</div><div class="line">      s.second=S;</div><div class="line">      Q.push(s);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (!Q.empty())</div><div class="line">      &#123;</div><div class="line">            Pair u=Q.top();</div><div class="line">            Q.pop();</div><div class="line">            val=u.first;</div><div class="line">            v=u.second;</div><div class="line">            <span class="keyword">if</span> (dis[v]&lt;val) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=head[v]; i!=<span class="number">-1</span>; i=edge[i].next)</div><div class="line">            &#123;</div><div class="line">                  k=edge[i];</div><div class="line">                  <span class="keyword">if</span> (dis[k.to]&gt;dis[v]+k.w)</div><div class="line">                  &#123;</div><div class="line">                        dis[k.to]=dis[v]+k.w;</div><div class="line">                        Q.push(Pair(dis[k.to],k.to));</div><div class="line">                  &#125;</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> a,b,x;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) dis[i]=Max;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">300</span>;i++) head[i]=<span class="number">-1</span>;</div><div class="line">            tail=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;x);</div><div class="line">                  build(a,b,x);</div><div class="line">                  build(b,a,x);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);</div><div class="line">            Dijkstra();</div><div class="line">            <span class="keyword">if</span> (dis[T]!=Max) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[T]);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1215 【简单题】七夕节  &  HDOJ 1406 【简单题】完数]]></title>
      <url>https://b0lv42.github.io/2017/03/08/HDOJ%201215%20%E3%80%90%E7%AE%80%E5%8D%95%E9%A2%98%E3%80%91%E4%B8%83%E5%A4%95%E8%8A%82%20%20&amp;%20%20HDOJ%201406%20%E3%80%90%E7%AE%80%E5%8D%95%E9%A2%98%E3%80%91%E5%AE%8C%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>【题目描述】<br>P1215：<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1215" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1215</a><br>P1406：<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1406" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1406</a></p>
<p>【思路】<br>这2个题差不多的，找完数。纯枚举..<br>P.S.1406有坑，sum1可能会大于sum2，要提前判断一下。</p>
<p>1215：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> T,n,x;</div><div class="line">      <span class="keyword">long</span> <span class="keyword">long</span> sum;</div><div class="line"></div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (T--)</div><div class="line">      &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">            sum=<span class="number">0</span>;</div><div class="line">            x=<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n)+<span class="number">0.5</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)</div><div class="line">                  <span class="keyword">if</span> (n%i==<span class="number">0</span>)</div><div class="line">                  &#123;</div><div class="line">                        sum+=i;</div><div class="line">                        <span class="keyword">if</span> (n/i&lt;n &amp;&amp; n/i&gt;i) sum+=n/i;</div><div class="line">                  &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1406：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[<span class="number">11000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> T,a,b,n,x;</div><div class="line">      <span class="keyword">long</span> <span class="keyword">long</span> sum;</div><div class="line"></div><div class="line">      f[<span class="number">0</span>]=<span class="number">0</span>;f[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">2</span>;n&lt;<span class="number">11000</span>;n++)</div><div class="line">      &#123;</div><div class="line">            sum=<span class="number">0</span>;</div><div class="line">            x=<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n)+<span class="number">0.5</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)</div><div class="line">                  <span class="keyword">if</span> (n%i==<span class="number">0</span>)</div><div class="line">                  &#123;</div><div class="line">                        sum+=i;</div><div class="line">                        <span class="keyword">if</span> (n/i&lt;n &amp;&amp; n/i&gt;i) sum+=n/i;</div><div class="line">                  &#125;</div><div class="line">            <span class="keyword">if</span> (sum==n) f[n]=f[n<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> f[n]=f[n<span class="number">-1</span>];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">      <span class="keyword">while</span> (T--)</div><div class="line">      &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            <span class="keyword">if</span> (a&gt;b) swap(a,b);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[b]-f[a<span class="number">-1</span>]);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1217 【Floyd】Arbitrage]]></title>
      <url>https://b0lv42.github.io/2017/03/06/HDOJ%201217%20%E3%80%90Floyd%E3%80%91Arbitrage/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1217" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1217</a><br><br></p>
<p>###【思路】<br>就是求最长路，因为起点和终点无数并且数据很小，所以用floyd也可以。<br>因为是倍数关系，所以当两个点不通时，边值就初始化为0，因为任何数乘以0都等于0嘛。<br>松弛操作完毕后，点i到自身的值即<code>dis[i][i]</code>若是大于1，就说明可以盈利啦。</p>
<p>P.S.1：此题为单向边，我之前建成了双向的orz<br>P.S.2：原来cin是不会读入回车和空格的，但是会吃掉它。就是说不用像scanf那样读入一个int的m后还得用getchar()吃掉一个回车符号，这里我调了半天才发现，果然还是语言基础太差啊，老是错在细节上面。<br><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">string</span> Name[<span class="number">100</span>];</div><div class="line"><span class="keyword">double</span> dis[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,x,y,Case,flag;</div><div class="line">      <span class="keyword">double</span> num;</div><div class="line">      <span class="keyword">char</span> ch;</div><div class="line">      <span class="built_in">string</span> s1,s2;</div><div class="line"></div><div class="line">      Case=<span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)</div><div class="line">      &#123;</div><div class="line">            Case++;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;Name[i];</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) dis[i][j]=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="built_in">cin</span>&gt;&gt;m;;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  x=y=<span class="number">0</span>;</div><div class="line">                  <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;num&gt;&gt;s2;</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                  &#123;</div><div class="line">                        <span class="keyword">if</span> (Name[j]==s1) x=j;</div><div class="line">                        <span class="keyword">if</span> (Name[j]==s2) y=j;</div><div class="line">                        <span class="keyword">if</span> (x &amp;&amp; y) <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line">                  dis[x][y]=num;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                        &#123;</div><div class="line">                              dis[i][j]=max(dis[i][j],dis[i][k]*dis[k][j]);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">            flag=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                  <span class="keyword">if</span> (dis[i][i]&gt;<span class="number">1</span>)</div><div class="line">                  &#123;</div><div class="line">                        flag=<span class="number">1</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;Case&lt;&lt;<span class="string">": "</span>;</div><div class="line">            <span class="keyword">if</span> (flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1869 【Floyd】六度分离]]></title>
      <url>https://b0lv42.github.io/2017/03/05/HDOJ%201869%20%E3%80%90Floyd%E3%80%91%E5%85%AD%E5%BA%A6%E5%88%86%E7%A6%BB/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1869" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1869</a><br><br><br><br></p>
<p>###【思路】<br>因为是任意起点和任意的中点而且数据也很小，所以用floyd比较合适。</p>
<p>PS1：题目有坑，编号是从0到n-1的，我习惯用1到n编号<br>PS2：在<code>dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j])</code>松弛操作这里如果给dis数组赋的初值太大，会炸，比如我之前赋的21亿，操作时21亿+21亿，就炸了，WA了一发。<br><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dis[<span class="number">300</span>][<span class="number">300</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,m,a,b,check;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">250</span>;i++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">250</span>;j++)</div><div class="line">                        <span class="keyword">if</span> (i==j) dis[i][j]==<span class="number">0</span>;</div><div class="line">                        <span class="keyword">else</span> dis[i][j]=<span class="number">210000000</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">                  dis[a+<span class="number">1</span>][b+<span class="number">1</span>]=dis[b+<span class="number">1</span>][a+<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                              dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);              <span class="comment">//floyd</span></div><div class="line"></div><div class="line">            check=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                        <span class="keyword">if</span> (dis[i][j]&gt;<span class="number">7</span>)</div><div class="line">                        &#123;</div><div class="line">                              check=<span class="number">1</span>;</div><div class="line">                              <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                  <span class="keyword">if</span> (check==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (check==<span class="number">1</span>) <span class="built_in">printf</span> (<span class="string">"No\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span> (<span class="string">"Yes\n"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1290 【递推】献给杭电五十周年校庆的礼物]]></title>
      <url>https://b0lv42.github.io/2017/03/04/HDOJ%201290%20%E3%80%90%E9%80%92%E6%8E%A8%E3%80%91%E7%8C%AE%E7%BB%99%E6%9D%AD%E7%94%B5%E4%BA%94%E5%8D%81%E5%91%A8%E5%B9%B4%E6%A0%A1%E5%BA%86%E7%9A%84%E7%A4%BC%E7%89%A9/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1290" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1290</a><br><br></p>
<p>###【思路】<br>和直线切割平面是一个道理，要想得到最多的平面，第i条直线就得与前i-1条直线相交，此时它自己被分割成i段，每段都把它所在的平面切成2块，所以对于平面，f[i]=f[i-1]+i;<br>平面切割空间时，第i个平面必须要与前i-1个平面全部相交，即自己被i-1条直线切割成f[i-1]个平面，每个平面把它所在的空间切成2块，所以对于空间，zone[i]=zone[i-1]+f[i-1]。<br>P.S.输出需要用long long。<br><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">1100</span>],zone[<span class="number">1100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">      f[<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">      f[<span class="number">2</span>]=<span class="number">4</span>;</div><div class="line">      zone[<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">      zone[<span class="number">2</span>]=<span class="number">4</span>;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">1100</span>;i++)</div><div class="line">      &#123;</div><div class="line">            f[i]=f[i<span class="number">-1</span>]+i;</div><div class="line">            zone[i]=zone[i<span class="number">-1</span>]+f[i<span class="number">-1</span>];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,zone[n]);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1051 【贪心】 Wooden Sticks]]></title>
      <url>https://b0lv42.github.io/2017/03/03/HDOJ%201051%20%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%20Wooden%20Sticks/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1051" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1051</a><br><br><br><br></p>
<h3 id="【思路】"><a href="#【思路】" class="headerlink" title="【思路】"></a>【思路】</h3><p>就是一个简单的贪心，我还以为是LIS….<br>思路就是对于每一根木棍，如果它没有使用过的话，如果L和W都&gt;=当前，就用它更新当前，并标记使用过。如果不满足&gt;=，就把它加入队列，作为新的开头。每次都是取出队列头，如此循环，直到所有的木棍全部被切割完成。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> Use[<span class="number">11000</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data</div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> l,w;</div><div class="line">&#125;wood[<span class="number">11000</span>],change[<span class="number">11000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(data a,data b)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span> (a.l!=b.l) <span class="keyword">return</span> (a.l&lt;b.l);    <span class="comment">//按长度排序</span></div><div class="line">      <span class="keyword">return</span> (a.w&lt;b.w);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> n,x,y,t,T,ans,num;</div><div class="line"></div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (T--)</div><div class="line">      &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            &#123;</div><div class="line">                  Use[i]=<span class="number">1</span>;</div><div class="line">                  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;wood[i].l,&amp;wood[i].w);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            sort(wood+<span class="number">1</span>,wood+<span class="number">1</span>+n,cmp);</div><div class="line"></div><div class="line">            x=<span class="number">0</span>;y=<span class="number">0</span>;</div><div class="line">            Use[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">            num=<span class="number">1</span>;ans=<span class="number">1</span>;</div><div class="line">            change[<span class="number">1</span>].l=wood[<span class="number">1</span>].l;</div><div class="line">            change[<span class="number">1</span>].w=wood[<span class="number">1</span>].w;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (num&lt;n)</div><div class="line">            &#123;</div><div class="line">                  t=<span class="number">1</span>;</div><div class="line">                  x=change[<span class="number">1</span>].l;</div><div class="line">                  y=change[<span class="number">1</span>].w;</div><div class="line"></div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                        <span class="keyword">if</span> (Use[i]==<span class="number">1</span>)</div><div class="line">                        &#123;</div><div class="line">                              <span class="keyword">if</span> ( x&lt;=wood[i].l &amp;&amp; y&lt;=wood[i].w )</div><div class="line">                              &#123;</div><div class="line">                                    num++;</div><div class="line">                                    x=wood[i].l;</div><div class="line">                                    y=wood[i].w;</div><div class="line">                                    Use[i]=<span class="number">0</span>;</div><div class="line">                              &#125;</div><div class="line">                              <span class="keyword">else</span> <span class="keyword">if</span> (t==<span class="number">1</span>)</div><div class="line">                              &#123;</div><div class="line">                                    num++;</div><div class="line">                                    ans++;</div><div class="line">                                    Use[i]=<span class="number">0</span>;</div><div class="line">                                    change[t].l=wood[i].l;</div><div class="line">                                    change[t].w=wood[i].w;</div><div class="line">                                    t++;</div><div class="line">                              &#125;</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDOJ 1098 【数学题】Ignatius's puzzle]]></title>
      <url>https://b0lv42.github.io/2017/03/02/HDOJ%201098%20%E3%80%90%E6%95%B0%E5%AD%A6%E9%A2%98%E3%80%91Ignatius's%20puzzle/</url>
      <content type="html"><![CDATA[<h3 id="【题目描述】"><a href="#【题目描述】" class="headerlink" title="【题目描述】"></a>【题目描述】</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1098" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1098</a><br><br></p>
<h3 id="【思路】"><a href="#【思路】" class="headerlink" title="【思路】"></a>【思路】</h3><p>要求是给定k，求一个最小的a，对任意的x都能使f(x)整除65，所以f(1)=5+13+a<em>k=18+a</em>k，只要枚举a就可以啦，范围是0到64，因为对数m取模的话，结果是0到m-1循环的啦。查了下解题证明，即证明f(x+1)也成立。</p>
<blockquote>
<p> 求解思路：</p>
<p>f(x)=5<em>x^13+13</em>x^5+k<em>a</em>x;</p>
<p>其中题中”f(x)|65”表示对于任意的整数x,f(x)都能被65整除.所以不难推断:f(x+1)|65也成立.</p>
<p>f(x+1)=5<em>(x+1)^13+13</em>(x+1)^5+k<em>a</em>(x+1),</p>
<p>根据二项式定理:(a+b)^n=C(n,0)a^n+C(n,1)a^(n-1)<em>b+C(n,2)a^(n-2)</em>b^2+…+C(n,n)b^n</p>
<p>得：f(x+1)=5<em>(C(13,0)+C(13,1)</em>x+C(13,2)<em>x^2+…+C(13,13)</em>x^13) +<br>13<em>(C(5,0)+C(5,1)</em>x+…+C(5,5)<em>x^5) + k</em>a*(x+1);</p>
<p>从中提取出f(x)后得：</p>
<p>f(x+1)=f(x)+5<em>(C(13,0) + C(13,1)</em>x+C(13,2)<em>x^2+…+C(13,12)</em>x^12) +<br>13<em>(C(5,0)+C(5,1)</em>x+…+C(5,4)<em>x^4) + k</em>a;</p>
<p>不难看出出了5<em>C(13,0) 、13</em>C(5,0)和k<em>a三项以外，其他项无论x取任意整数都能被65整除,所以如果5</em>C(13,0)<br>+13<em>C(5,0)+k</em>a(相当于18+k*a)能被65整除的话，就可以得出f(x+1)|65了。</p>
<p>再验证一下f(1)=5+13+k<em>a=18+k</em>a同样适用。</p>
<p>所以最终的问题就是给定一个非负整数k,使得(18+k*a)|65,输出满足此条件的最小的非负整数a。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">int</span> k,flag;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k))</div><div class="line">      &#123;</div><div class="line">            flag=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">64</span>;i++)</div><div class="line">            &#123;</div><div class="line">                  <span class="keyword">if</span> ((<span class="number">18</span>+k*i)%<span class="number">65</span>==<span class="number">0</span>)</div><div class="line">                  &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</div><div class="line">                        flag=<span class="number">0</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ACM题解 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
